package draw;


import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.SecondaryLoop;
import java.awt.Shape;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;
import javax.swing.event.MouseInputAdapter;

import gui.PowerPaintGUI;
import shape.ShapeInformation;
import tools.DrawTool;

public class DrawingPanel extends JPanel { 
    /**
     * 
     */
    private static final long serialVersionUID = -5980366470331898625L;
    private Point myFirstPoint;
    private Point myLastPoint;
    private Color myPrimaryColor;
    private Color mySecondaryColor;
    private Color myCurrentColor;
    private Integer myWidth;
    private List<ShapeInformation> myShapes;
    private ShapeInformation myDraggingShape;
    private Line2D.Double myLine;
    private Line2D.Double myDraggingLine;
    private ShapeInformation myCurrentShape;
    private DrawTool myCurrentTool;
    
    
    public DrawingPanel() {
        super();
        setSize(500, 300);
        setBackground(Color.WHITE);
        setUpMouseListners();
        myFirstPoint = new Point(-1000, -1000);
        myLastPoint = new Point(-1000, -1000);
        myPrimaryColor = new Color(51, 0, 111);
        mySecondaryColor = new Color(232, 211, 162);
        myCurrentColor = new Color(51, 0, 111);
        myShapes = new ArrayList<ShapeInformation>();
        myLine = new Line2D.Double(); 
        myDraggingLine = new Line2D.Double(); 
        myDraggingShape = new ShapeInformation(null, null, null);
        myCurrentTool = null;
        
    }
    @Override
    public void paintComponent(final Graphics theGraphics) { 
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
 
        for (final ShapeInformation currentShapes : myShapes) {
            g2d.setPaint(currentShapes.getColor());
            //System.out.println(currentShapes.getWidth());
            g2d.setStroke(new BasicStroke(currentShapes.getWidth()));
            g2d.draw(currentShapes.getShape());
            
        }
        if(myDraggingShape.getShape() != null) {
            g2d.setStroke(new BasicStroke(myDraggingShape.getWidth()));
            g2d.setPaint(myDraggingShape.getColor());
            g2d.draw(myDraggingShape.getShape());
         
        }

    }
    //connects the mouse adapter to the drawing panel when create a new drawing panel object.
    private void setUpMouseListners() {
        final MouseInputAdapter connect = new MyMouseInputAdapter();
        addMouseListener(connect);
        addMouseMotionListener(connect);
    }
    //This will get the Primary color from the PowerPaintGUI.
    public void getPrimaryColor(Color theColor) {
        myPrimaryColor = theColor;
    }
    //This will get the Secondary color from the PowerPaintGUI.
    public void getSecondaryColor(Color theColor) {
        mySecondaryColor = theColor;
    }
    public void getSliderWidth(Integer theWidth) {
        myWidth = theWidth;
    }
    public void getTool(DrawTool theTool) {
        myCurrentTool = theTool;
    }
    //create a inner class here this will take care of all the mouse listener stuff.
    public class MyMouseInputAdapter extends MouseInputAdapter {
        
        //these methods are found in MouseListener
        @Override
        public void mousePressed(final MouseEvent theEvent) {

            myFirstPoint = theEvent.getPoint(); 
            myLine = new Line2D.Double(myFirstPoint, myLastPoint);

            myCurrentShape = new ShapeInformation(myLine, myCurrentColor, myWidth);
          
            if (theEvent.getButton() == MouseEvent.BUTTON1) {
                myCurrentColor = myPrimaryColor;
                myCurrentShape.setColor(myPrimaryColor);
            } else {
                myCurrentColor = mySecondaryColor;
                myCurrentShape.setColor(mySecondaryColor);
                                
                
            }
            
        }
        
        @Override
        public void mouseReleased(final MouseEvent theEvent) {
            myLastPoint = theEvent.getPoint();
 
            myDraggingLine = new Line2D.Double(myFirstPoint, myLastPoint);
            myCurrentShape.setShape((Shape) myDraggingLine.clone());
            myCurrentShape.setWidth(myWidth);
            //myCurrentShape.setColor(myCurrentColor);
            myShapes.add(myCurrentShape);
            repaint();
        }
        
        @Override
        public void mouseDragged(final MouseEvent theEvent) {
            myLastPoint = theEvent.getPoint();
            final Line2D.Double updatedShape = new Line2D.Double(myFirstPoint, myLastPoint);
            myDraggingLine.setLine(updatedShape);
            myDraggingShape.setShape(myDraggingLine);
            myDraggingShape.setColor(myCurrentColor);
            myDraggingShape.setWidth(myWidth);
            repaint();
        }
        
        @Override
        public void mouseEntered(final MouseEvent theEvent) {
            setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
        }
    }
}